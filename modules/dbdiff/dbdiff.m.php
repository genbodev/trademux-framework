<?php

class DbdiffModel extends BaseModel 
{
	/**
	 * Get Key fields in table dump
	 *
	 * @param string $sql table dump
	 * @return array
	 */
	protected function _getKeys($sql)
	{
		$keys = array();
		if (preg_match_all('~(unique |fulltext |primary )?key (`.+`)?[\s]*\(`(.+)`\)~Ui', $sql, $matches, PREG_SET_ORDER))
		{
			foreach ($matches as $val)
			{
				$val[2] = str_replace('`', '', trim($val[2]));
				$keys[$val[2]]['type'] = trim($val[1]);
				$keys[$val[2]]['fields'] = explode('`,`', $val[3]);
			}
		}
		return $keys;
	}
	
	/**
	 * Get table engine and charset
	 *
	 * @param string $sql table dump
	 * @return array
	 */
	protected function _getInfo($sql)
	{
		$return = array();
		//get engine
		if (preg_match('~engine=(.+) ~Ui', $sql, $matches)) $return['Engine'] = trim($matches[1]);

		//get default charset
		if (preg_match('~default charset=(.+)$~Ui', $sql, $matches)) $return['Charset'] = trim($matches[1]);

		return $return;
	}	
	
	/**
	 * Returns array of tables with fields generated by data from db
	 *
	 * @return array
	 */
	public function getDumpFromDb()
	{
		$tables = self::$db->loadColumn('SHOW TABLES'); // get list of tables in db
		$dump = array();
		
		foreach ($tables as $key=>$value)
		{
			$desc = self::$db->loadAssoc("DESC `{$value}`"); // get list of columns
			$sql = self::$db->loadRow("SHOW CREATE TABLE  `{$value}`");
			
			if (empty($desc)) die('OMG O_o: DESC '.$value.' returns empty set!');
			else
			{
				foreach ($desc as $k=>$v)
				{
					$field = $desc[$k]['Field'];
					unset($desc[$k]['Field']);  // unset :-E , but it was in original version
					$dump[$value][$field] = $desc[$k];
				}
				
				$keys = $this->_getKeys($sql['Create Table']);
				$info = $this->_getInfo($sql['Create Table']);
				//`` quotes must be!!!!!! because there can be real field `info` in table
				if (count($info) == 2) $dump[$value]['`info`'] = $info;

				foreach ($keys as $name=>$arr)
				{
					if (count($arr['fields']) > 1)
					{
						
						if ($arr['type'] == 'UNIQUE') $setkey = 'UNI_'.$name;
						else if ($arr['type'] == 'FULLTEXT') $setkey = 'FUL_'.$name;
						else if ($arr['type'] == 'PRIMARY') $setkey = 'PRI_'.$name;
						else $setkey = 'MUL_'.$name;
						
						foreach ($arr['fields'] as $field)
						{
							$dump[$value][$field]['Key'] = $setkey;
						}
					}
					else 
					{
						if ($arr['type'] == 'UNIQUE') $setkey = 'UNI';
						else if ($arr['type'] == 'FULLTEXT') $setkey = 'FUL';
						else if ($arr['type'] == 'PRIMARY') $setkey = 'PRI';
						else $setkey = 'MUL';
						
						$dump[$value][$arr['fields'][0]]['Key'] = $setkey;
					}
				}
			}
		}

		return $dump;
	}
	
	/**
	 * Parses file with dump (not SQL dump) and returns array of tables with fields
	 * File format:
	 * 		table_name1/column1%type;is_null;is_key;default_value;auto_increment|column2% ...
	 *		table_name2/column1%type;is_null;is_key;default_value;auto_increment|column2% ...
	 * 		...
	 * 
	 * @param string $filename
	 * @return array
	 */
	public function getDumpFromFile($filename)
	{
		$fileData = file_get_contents($filename);
		
		$typeDb = array(0=>'Type', 1=>'Null', 2=>'Key', 3=>'Default', 4=>'Extra');
		$infoDb = array(0=>'Engine', 1=>'Charset');
		
		$newData = array();
		$nameTable_dataTable = explode("\n", $fileData);
		foreach ($nameTable_dataTable as $key=>$dataTable)
		{
			$name_data = explode('/', $dataTable);
			$nameField_dataField = explode('|', $name_data[1]);
			foreach ($nameField_dataField as $data)
			{
				$type = array();
				$nameFiled = explode('%', $data);
				$typeData = explode(';', $nameFiled[1]);
				if ($nameFiled[0] == '`info`')
				{
					foreach ($typeData as $k=>$value) $type[$infoDb[$k]] = $value;
				}
				else 
				{
					foreach ($typeData as $k=>$value) $type[$typeDb[$k]] = $value;
				}
				$newData[$name_data[0]][$nameFiled[0]] = $type;
			}
		}
		unlink($filename);
		return $newData;
	}
	
	/**
	 * Execute SQL query
	 *
	 * @param string $sql
	 */
	public function execSQL($sql)
	{
		self::$db->query($sql);
	}
}